from enum import Enum, auto
from typing import Dict, NewType, Tuple, List
from multiprocessing import Process, Manager
import csv
import io
import json
import logging
import os
import random
import time
import uuid

from flask import request, jsonify, flash, redirect, send_from_directory, url_for, abort
from flask_cors import CORS, cross_origin
from redis import Redis
from werkzeug.utils import secure_filename
import flask
import rq

from allocation import *
import consts

UPLOAD_FOLDER = "./api/uploads/"
RESULT_FOLDER = "./api/results/"
ALLOWED_EXTENSIONS = ["csv"]

app = flask.Flask(__name__)
cors = CORS(app)
app.config["DEBUG"] = True
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER
app.config["RESULT_FOLDER"] = RESULT_FOLDER
app.config["CORS_HEADERS"] = "Content-Type"
app.config["REDIS_URL"] = "redis://"
app.redis = Redis.from_url(app.config["REDIS_URL"])
app.task_queue = rq.Queue("allocation-task", connection=app.redis)

JobID = NewType("JobID", str)


class JobStatus(Enum):
    WAITING = auto()
    RUNNING = auto()
    SUCCESS = auto()
    FAILURE = auto()


logging.basicConfig(level=logging.DEBUG)

jobs = Manager().dict()
results = Manager().dict()


def allowed_file(filename: str) -> bool:
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route("/files")
def list_files() -> str:
    files = []
    for f in os.listdir(UPLOAD_FOLDER):
        path = os.path.join(UPLOAD_FOLDER, f)
        if os.path.isfile(path):
            files.append(f)
    return jsonify(files)


# TODO: Clean up
@app.route("/allocate/", methods=["POST"])
def upload_file():
    app.logger.info("henlo")
    if request.method == "POST":
        app.logger.info(request.files)
        if "pref" not in request.files or "proj" not in request.files:
            app.logger.info("yote")
            return flask.Response(status=500)
        pref = request.files["pref"]
        proj = request.files["proj"]
        if not allowed_file(pref.filename):
            return flask.Response(status=500)
        if not allowed_file(pref.filename):
            return flask.Response(status=500)
        stream = io.StringIO(pref.stream.read().decode("utf-8-sig"), newline=None)
        inputDict = csv.DictReader(stream)
        studentPreferences = createStudentPrefMap(inputDict)
        stream2 = io.StringIO(proj.stream.read().decode("utf-8-sig"), newline=None)
        inputDict2 = csv.DictReader(stream2)
        StaffProj = createProjStaffMap(inputDict2)
        if "config" in request.files:
            configfile = request.files["config"]
            stream3 = io.StringIO(
                configfile.stream.read().decode("utf-8-sig"), newline=None
            )
            configdict = json.load(stream3)
            app.logger.info(f"configdict {configdict}")
            config = Config.from_dict(configdict)
            app.logger.info(config)
        else:
            config = Config()
        job = app.task_queue.enqueue(
            run_allocation_job,
            (studentPreferences, StaffProj, config),
        )
        app.logger.info(f"config {job.id}")
        return jsonify({"id": job.id}), 202


@app.route("/get_status/", methods=["GET"])
def get_status():
    id = request.args.get("job_id")
    app.logger.info(f"request {request.args}")
    app.logger.info(f" jobs {jobs}")
    app.logger.info(f" id requested {id}")
    status = jobs.get(id)
    if status:
        return status.name, 200
    return ("", 204)


@app.route("/get_result/", methods=["GET"])
def get_results():
    id = request.args.get("job_id")
    status = jobs.get(id)
    if status == JobStatus.SUCCESS:
        res = results.get(id)
        if res:
            return jsonify(res), 200
    return ("", 204)


def run_allocation(
    studentPreferences: Dict[StudentID, List[ProjectID]],
    ProjStaffMap: Dict[ProjectID, StaffID],
    config: Config,
) -> Dict[StudentID, ProjectID]:
    costMap = getCostMap(studentPreferences)
    bestResult: Dict[StudentID, ProjectID] = {}
    bestCost: float = float("inf")
    for i in range(config.numRuns):
        res = allocate(studentPreferences, ProjStaffMap, config, costMap)
        cost = sumCost(res, costMap)
        if cost < bestCost:
            bestCost = cost
            bestResult = res
    return bestResult


def run_allocation_job(job_dict, results_dict, studentPref, StaffProj, config):
    app.logger.info(f"Processing {job_id}")
    while get_num_jobs(JobStatus.RUNNING) > consts.MAX_CONCURRENT_RUNNING_JOBS:
        time.sleep(consts.SLEEPING_TIME)
    try:
        res = run_allocation(studentPref, StaffProj, config)
        update_job_status(job_dict, job_id, JobStatus.SUCCESS)
        results_dict[str(job_id)] = res
    except:
        log_error = f"Error: bidding job failed for {job_id}"
        raise Exception(log_error)
        abort(403)


def get_num_jobs(job_status: JobStatus) -> int:
    return list(jobs.values()).count(job_status)


def update_job_status(job_dict, job_id: JobID, JobStatus: JobStatus) -> None:
    job_dict[str(job_id)] = JobStatus


@app.route("/single-file/", methods=["POST"])
def single_file():
    if request.method == "POST":
        return "good job", 200


@app.route("/files/<filename>")
def uploaded_file(filename):
    return send_from_directory(app.config["UPLOAD_FOLDER"], filename)


@app.route("/")
def hello_world() -> str:
    return "Hey, we have Flask in a Docker container!"


if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0")
